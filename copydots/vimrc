" vim:filetype=vim

" vim behaves like vim and not vi
set nocompatible

" manage pathogen from a submodule
runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()
Helptags

syntax on
if has('autocmd')
    filetype plugin indent on
endif

" display status bar
set laststatus=2
" display line and char count in status bar
set ruler
" display line numbers
set number
" allow buffers to exist without being written to disk
set hidden
set encoding=utf-8
" highlight search terms; :noh to clear
set hlsearch
" interactively search for expression
set incsearch
" smoother redraw for faster terms
set ttyfast
" faster escape into modes
set timeoutlen=400
set ttimeoutlen=50
" let OS decide when to sync
set nofsync
" don't need weird redraw times
set lazyredraw
" minimum number of lines to display around the curser line
set scrolloff=3
set sidescrolloff=3
" allow visual block mode to not care about chars not being there
set virtualedit=block
" sane defaults for windows splits
set splitbelow
set splitright
" show title in console bar
set title
" mouse in normal and visual mode
set mouse=nvic
" Hide mouse when typing
set mousehide
" backspace works like normal
set backspace=indent,eol,start
" Use system clipboard
set clipboard=unnamed
" commandline history
set history=1000
" so cursor stays in same column after commands: CTRL-D, CTRL-U, CTRL-B, CTRL-F,
"   'G', 'H', 'M', 'L', gg, etc
set nostartofline
" only allow certain functions in cur dir vimrc's
set secure
"   allow vimrc settings in dir where vim is launched; .exrc .vimrc .gvimrc
"   set exrc
" allow modelines; files can declare options as a comment; # vim: noai:bla tw=2
set modeline
" switch to a window in which a buffer is already open
set switchbuf=useopen
" just one space for line joins, even after punctuation
set nojoinspaces
" Know what just happened, no matter the amount of lines changed
set report=0
" show extra info on right side of command line
set showcmd

" use system clipboards (includes '+' as well)
if has('unnamedplus')
  set clipboard=unnamedplus,unnamed
endif

" for spell checking
if exists('spelllang')
  set spelllang=en_US
endif

" TODO: sane viminfo defaults
" Marks are saved for the past 100 files
set viminfo='100
" number of searches to save, max
set viminfo+=/1000
" number of commands to save, max
set viminfo+=:1000
" number of lines saved for each register, max
set viminfo+=<500
" number of lines in input history to be saved, max
set viminfo+=@500
" size in kb for registers to be saved, max
set viminfo+=s1000
" ignore these directory paths
set viminfo+=r/tmp,r/mnt/cdrom
" viminfo is in .vim folder
set viminfo+=n~/.vim/viminfo

" character to show if a line is wrapped
if exists('breakpoint')
  set showbreak=↪
endif
" <xx> as non-print characters instead of control style characters
set display=uhex

set background=dark
colorscheme base16-monokai
" force 256 term
set t_Co=256
" don't clear terminal background
set t_ut=

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'
" Mark past 80 columns
if exists('colorcolumn')
  set colorcolumn=81
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>81v.\+', -1)
endif

" TODO: LESS PINKIE HURT!!!!
" undo? waiting on undo since open
" if has("persistant_undo")
"   set undofile
"   set undolevel=1000
" endif
" set autowriteall
" set autoread

" Find files recusively in current directory
set path+=**
" Don't have to look for suffixes in find
set suffixesadd=.rb,.py,.coffee,.js,.sh,.pl,.pm
set suffixesadd+=.erl,.go,.php
set suffixesadd+=.java,.jsp,.cs,.c,.h
set suffixesadd+=.C,.cc,.CPP,.cxx,.c++,.cpp,.H,.hh,.HPP,.hxx,.h++,.hpp,.tcc
set suffixesadd+=.s,.S,.asm
set suffixesadd+=.erb,.sass,.scss,.html,.css,.json

" Hidden tags file
set tags+=.tags;

" wildmenu setup (tab completion with a builtin popup menu)
" the wildmenu is a single line
" wildmode is semi-fuzzy matching
if has('wildmenu')
  " Compiled files
  set wildignore+=*.a,*.o,*.so,*.exe,*.dll,*.obj
  set wildignore+=*.class,*.pyc,*.pyo,*.luac
  " Images/Media
  set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png,*.avi,*.mpg,*.mp4,*.mp3
  " VCS stuff
  set wildignore+=.git,.hg,.svn
  " temperary files and tags files
  set wildignore+=*~,*.swp,*.sw?,*.tmp,.tags,tags
  " LaTeX crap
  set wildignore+=*.log,*.aux,*.dvi,*.aut,*.bbl,*.blg,*.fff,*.out,*.pdf,*.ps
  set wildignore+=*.toc,*.ttt

  set wildmenu
  set wildmode=longest:full,full
endif

" synonyms for filetypes
if has('autocmd')
  autocmd BufNewFile,BufRead *.rss setfiletype xml
  autocmd BufNewFile,BufRead *.json setfiletype javascript
"  autocmd FileType rb,.py,.coffee,.js,.sh,.sass,.scss,.html,.erb,.css,.java,.C
".cc,.CPP,.cxx,.c++,.cpp,.H,.hh,.HPP,.hxx,.h++,.hpp,.tcc,.c,.h .s,.S
endif

function! SetProgDefaults()
  setlocal smarttab
  setlocal expandtab

  " Highlight matching braces
  setlocal showmatch
  " Show line and column number
  setlocal ruler

  " Set tab, non-breaking space, and \n to be visiable characters
  setlocal listchars=tab:»\ ,eol:¬,nbsp:⚑
  setlocal list

  " Highlight extra whitespace at the end of a line
  highlight ExtraWhitespace ctermbg=red guibg=red
  match ExtraWhitespace /\s\+$/
endfunction

" plugin install:
"     # if starting from scratch dotfiles repo
"     $ git submodule update --init --recursive
"     # copy files into ~/.vim
"     $ cd ~/.vim/bundle/YouCompleteMe
"     $ ./install.py --all
"     $ cd ~/.vim/bundle/tern_for_vim
"     $ npm install
"     $ cd ~/.vim/bundle/vimproc.vim
"     $ make

" syntastic good configs
let g:syntastic_aggregate_errors = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_style_error_symbol = '⚡'
let g:syntastic_style_warning_symbol = '⚡'
let g:syntastic_check_on_open = 1

" auto supported syntastic checkers:
" gem install sass
" npm install -g coffeescript
" pacman -S bison # for yacc linting

" pacman -S clang-tools-extra # c linter
" pacman -S splint # c vuln and mistake checking
let g:syntastic_c_checkers = ['clang_check', 'splint']
" pacman -S mono
let g:syntastic_cs_checkers = ['mcs']
let g:syntastic_cpp_checkers = ['clang_check']
" npm install -g csslint
let g:syntastic_css_checkers = ['csslint']
" gem install haml haml-lint
let g:syntastic_haml_checkers = ['haml', 'haml_lint']
let g:syntastic_haskell_checkers = ['hlint', 'hdevtools']
" cower -d html-tidy # html
" See below for textlint stuff
let g:syntastic_html_checkers = ['eslint', 'textlint', 'tidy']
" npm install -g tern eslint
let g:syntastic_javascript_checkers = ['eslint', 'tern_lint']
" pacman -S lua
" cower -d luacheck
let g:syntastic_lua_checkers = ['luac', 'luacheck']
" See below for textlint stuff
let g:syntastic_markdown_checkers = ['textlint']
" pip install prospector py3kwarn
let g:syntastic_python_checkers = ['prospector', 'py3kwarn']
" gem install rubocop
let g:syntastic_ruby_checkers = ['rubocop']
" pacman -S shellcheck # sh/bash checker
let g:syntastic_sh_checkers = ['bashate', 'shellcheck']
" cower -d sqlint
let g:syntastic_sql_checkers = ['sqlint']
let g:syntastic_text_checkers = ['language_check', 'textlint']
" pacman -S libxml2
let g:syntastic_xml_checkers = ['xmllint']
" npm install -g jsyaml
let g:syntastic_yaml_checkers = ['jsyaml']

" ** textlint **
"
" npm install -g textlint # although it is recommended to only install in
"                         # project specific dirs
"
" possible textlint rules:
"   # don't allow more than one sentence to start with a conjunction per
"   #   paragraph
"   textlint-rule-no-start-duplicated-conjunction
"   # only 4 commas per sentence by default
"   textlint-rule-max-comma
"   # no ! or ?
"   textlint-rule-no-exclamation-question-mark
"   textlint-rule-unexpanded-acronym
"   # uses the rousseau npm package
"   textlint-rule-rousseau
"   # uses the alex npm package
"   # "Catch insensitive, inconsiderate writing
"   textlint-rule-alex
"   textlint-rule-common-misspellings
"   # kind of like rousseau, uses write-good npm package
"   textlint-rule-write-good
"   # pacman -S hunspell hunspell-en
"   textlint-rule-spellchecker
"   textlint-plugin-html

" netrw treeview
let g:netrw_liststyle = 3

" programming left overs
let g:netrw_list_hide = '*.a,*.o,*.so,*.exe,*.dll,*.obj'
let g:netrw_list_hide .= '*.class,*.pyc,*.pyo,*.luac'
" Images/Media
let g:netrw_list_hide .= '*.bmp,*.gif,*.ico,*.jpg,*.png,*.avi,*.mpg,*.mp4,*.mp3'
" VCS stuff
let g:netrw_list_hide .= '.git,.hg,.svn'
" temperary files and tags files
let g:netrw_list_hide .= '*~,*.swp,*.sw?,*.tmp,.tags,tags'
" LaTeX crap
let g:netrw_list_hide .= '*.log,*.aux,*.dvi,*.aut,*.bbl,*.blg,*.fff'
let g:netrw_list_hide .= '*.out,*.pdf,*.ps'
let g:netrw_list_hide .= '*.toc,*.ttt'

" for textobj-rubyblock
runtime macros/matchit.vim

" mappings
" Y acts like D and C instead of yy
noremap Y y$

" I like the unimpared mappings, but to be universal
if exists(':nohlsearch')
  nnoremap <C-L> :nohlsearch<CR><C-L>
endif

if has('lua')
  """"""""""" Unite
  let g:unite_source_file_rec_max_cache_files = 1000000

  call unite#custom#profile('default', 'context', {'prompt': '➤ '})
  " rank based on fuzzy matching strength
  call unite#custom#profile('proj_files', 'filters', 'sorter_rank')
  call unite#custom#profile('files', 'filters', 'sorter_rank')
  " us fuzzy matcher by default
  call unite#filters#matcher_default#use(['matcher_fuzzy'])
  " use relative paths for mru since path isn't an argument
  call unite#custom#source('neomru/file', 'matchers',
                           \ ['matcher_project_files',
                           \  'converter_relative_abbr', 'matcher_default'])
  nnoremap <silent> <CR> :<C-u>UniteWithCurrentDir
        \ -start-insert -resume -buffer-name=files -silent -short-source-names
        \ buffer_tab buffer neomru/file<CR>

  nnoremap <silent> <C-P> :<C-u>UniteWithCurrentDir
        \ -start-insert -resume -buffer-name=proj_files -auto-preview -silent
        \ -short-source-names
        \ neomru/file file_rec/async buffer<CR>

  autocmd FileType unite call s:unite_settings()
  function! s:unite_settings()
    imap <silent><buffer> <Tab> <Plug>(unite_select_next_line)
    nmap <silent><buffer> <Tab> <Plug>(unite_select_next_line)
    imap <silent><buffer> <S-Tab> <Plug>(unite_select_previous_line)
    nmap <silent><buffer> <S-Tab> <Plug>(unite_select_previous_line)
    imap <silent><buffer> <C-w> <Plug>(unite_delete_backward_path)
    imap <silent><buffer> <C-\><C-\> <Plug>(unite_rotate_next_source)
    nmap <silent><buffer> <C-\><C-\> <Plug>(unite_rotate_next_source)
  endfunction
endif
"""""""""" easytagshttps://github.com/xolox/vim-misc

let g:easytags_async = 1
let g:easytags_dynamic_files = 1
let g:easytags_file = '~/.vim/easytags'
let g:easytags_include_members = 1

""""""""""" localvimrc
let g:localvimrc_persistent = 1
let g:localvimrc_persistence_file = "~/.vim/localvimrc_persistent"

" Plugin TODO:
" vimwiki https://github.com/vimwiki/vimwiki.git
" vim-signature " <- show marks next to line numbers
" tpope/vim-vinegar.git
" Shougo/unite.vim
"   find more keymappings and extend
"     keymapping for preview mode
"   unite-tag: need to configure
"   unite-outline: What is this?
"   unite-help: looking at help files
" youcompleteme
"   loaded, need to config
" easytags
"   find better tagging programs (jstags,(?ruby?), ?)
" fholgado/minibufexpl.vim: fork, improved, small, tab like
" tpope/vim-rsi " readline keybindings in normal/command mode
" vimez/vim-tmux or zepto/unite-tmux or vim-tmux-navigator
" majutsushi/tagbar?
" VimTextObject ( comma separated list of arguments text objects)
" IndentObject
" godlygeek/tabular: format table based text
"   http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
" garbas/vim-snipmate: snippets, seems to be default (janus, sp13)
"   spf13/snipmate-snippets/tree/master/snippets: list of snippets
"   honza/vim-snippets: janus list of snippets
" bronson/vim-trailing-whitespace: simpler than trying to do it myself?
" terryma/vim-multiple-cursors: visual selection on multiple areas, impressive
" vim-scripts/ZoomWin: <C-w>o toggle instead of resettup
" airblade/vim-gitgutter: git diff info in the vim gutter
" othree/html5.vim
" mustache/vim-mustache-handlebars
" tpope/vim-surround: seems to be everywhere, verify keymappings
" kien/rainbow_parentheses.vim: a definite need, look at matching colorscheme though
" noahfrederick/vim-skeleton: templated files
" suan/vim-instant-markdown: live preview of markdown
" leshill/vim-json: needed even with JS syntax support?
" mxw/vim-jsx: react syntax highlighting
" skalnik/vim-vroom: if only for :RunNearestTest
" justinmk/vim-sneak
" jiangmiao/auto-pairs instead of delimitMate, better
" lucapette/vim-textobj-underscore
" ggreer/the_silver_searcher  ack/grep like, supposed to be best
" tpope/vim-dispatch test helper, quick-fix, etc
" gabrielelana/vim-markdown  supposed better markdown
" suan/vim-instant-markdown  markdown preview
"
" External installations:
" pacman -S the_silver_surfer # need 'ag.vim', for the 'ag' search command
" gem install ripper-tags # ripper-tags -f .tags -R --exclude=vendor
"

" Relook at Fugitive
" Relook at vim-rails
" Gundo vs. undotree?

" let g:rubycomplete_buffer_loading=1
" let g:rubycomplete_classes_in_global=1
" let g:rubycomplete_rails=1
"
" Notes:
" follow up reading from: http://www.infoq.com/presentations/Vim-From-Essentials-to-Mastery
" Capital letter appends to register
" CTRL-R register, CTRL-R CTRL-R, CTRL-R CTRL-O, CTRL-R CTRL-P
" registers: ": "1-9 (stack of delete history) "/ "! ". (last inserted text) "% (current file) "# (alt
"   file) "_ (blackhole) "= (expressions, can use math expressions)
" use rdoc, pydoc instead of man
" ex commands
" nmap & run last substitute, s///& (keep flags from last substitute)
" zz, zt, zb (move window around cursor)
" !<motion> !! (filter line through program)
" | (go to column)
" ; , used with t,T,f,F to repeat forward and backward
" preload registers in vimrc like let @d = strftime("%c")
" search when loaded let @/ = "search term"
" execute accidentally inserted command ^[ u@.
" combine registers let @a = @a . @b . @c
" capture output to a register redir @A
" yank matches into register :g/pattern/y A (uppercase is important)
" g< displays last command output
" q: q/ in nomral mode bring up history windows, CTRL-F when already in them
"
" map motion commands
"   CTRL-H CTRL-J CTRL-N CTRL-M CTRL-L (currently redraw) <Backspace>
"
" keys that totally need remapping:
"   <space> <cr> <C-space> CTRL-CR <Backspace> <C-Backspace>
" Need readline shortcuts in insert/command
