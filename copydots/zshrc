#!/bin/zsh
# vim: filetype=zsh

# hand picked cool chars
# ☺ ☹ ✗ ✓ ❤ ♥ ♦ ► ☣ ☠ « » ♪ ♫ ◆ ◇ ✣ ✧ ✦ ☾ ⚅ ⚑ ⚐ ◊ ⚒ ⚓ ⚔ ⚕ ⚛
# ⚚ ⚠ ⚡ ☢ ✝ ☭ ¬ × ÷ ∝ ∞ ∢ ∴ ∵ ♭ ♮ ♯ ♩ ❖ ⋆ ✯ ✩ ✪ ° ☐ ☑
# ⟰ ⤊ ⤧ ⥉ ⥣ ⍓ ⍍ Ξ ⅄ ⅎ Ж Ӂ ⊹ ⊼ ꟻ • ◆  ⅋ ‽ ⸘
# ● ◉ ■ □ ▢ ▬ ▭ ▮ ▯ ▰ ▱ ▲ ▶ ▾ ◀ △ ▷ ▽ ◁ ◇ ◢ ◣ ◤ ◥

# block characters
# ▀ ▁ ▂ ▃ ▄ ▅ ▆ ▇ █ ▉ ▊ ▋ ▌ ▍ ▎ ▏▐ ░ ▒ ▓ ▔ ▕ ▖ ▗ ▘ ▙ ▚ ▛ ▜ ▝ ▞ ▟

# box drawing
# ─━│┃┄┅┆┇┈┉┊┋┌┍┎┏ ┐┑┒┓└┕┖┗┘┙┚┛├┝┞┟ ┠┡┢┣┤┥┦┧┨┩┪┫┬┭┮┯ ┰ ┱ ┲ ┳ ┴ ┵ ┶ ┷ ┸ ┹ ┺ ┻
# ┼ ┽ ┾ ┿ ╀ ╁ ╂ ╃ ╄ ╅ ╆ ╇ ╈ ╉ ╊ ╋ ╌ ╍ ╎ ╏ ═ ║ ╒ ╓ ╔ ╕ ╖ ╗ ╘ ╙ ╚ ╛ ╜ ╝
# ╞ ╟ ╠ ╡ ╢ ╣ ╤ ╥ ╦ ╧ ╨ ╩ ╪ ╫ ╬ ╭ ╮ ╯ ╰ ╱ ╲ ╳ ╴ ╵ ╶ ╷ ╸ ╹ ╺ ╻ ╼ ╽ ╾ ╿

# punctuation
# ‒ – — ― ‖ ‗ ‘ ’ ‚ ‛ “ ” „ ‟
# †‡•‣․‥…‧ ‰ ‱ ′ ″ ‴ ‵ ‶ ‷ ‸ ‹ › ※ ‼ ‽ ‾ ‿ ⁀ ⁁ ⁂ ⁃ ⁄ ⁅ ⁆ ⁇ ⁈ ⁉ ⁊ ⁋ ⁌ ⁍ ⁎
# ⁏ ⁑ ⁒ ⁕ ⁖ ⁗ ⁘ ⁙ ⁚ ⁛ ⁜ ⁝ ⁞
# ⸗ ⸘ ⸞ ⸟ ⸢ ⸣ ⸤ ⸥ ⸮

# symbols
# ☀ ☁ ☂ ☃ ☄ ★ ☆ ☇ ☈ ☉ ☊ ☋ ☌ ☍ ☎ ☏ ☐ ☑ ☒ ☓ ☔ ☕ ☖ ☗ ☘ ☙ ☚ ☛ ☜ ☝ ☞ ☟ ☠ ☡ ☢ ☣ ☤ ☥ ☦
# ☧ ☨ ☩ ☪ ☫ ☬ ☭ ☮ ☯ ☰ ☱ ☲ ☳ ☴ ☵ ☶ ☷ ☸ ☹ ☺ ☻ ☼ ☽ ☾ ☿ ♀ ♁ ♂ ♃ ♄ ♅ ♆ ♇ ♈ ♉ ♊ ♋ ♌ ♍
# ♎ ♏ ♐ ♑ ♒ ♓ ♔ ♕ ♖ ♗ ♘ ♙ ♚ ♛ ♜ ♝ ♞ ♟ ♠ ♡ ♢ ♣ ♤ ♥ ♦ ♧ ♨ ♩ ♪ ♫ ♬ ♭ ♮ ♯ ♰ ♱ ♲ ♳ ♴
# ♵ ♶ ♷ ♸ ♹ ♺ ♻ ♼ ♽ ♾ ♿ ⚀ ⚁ ⚂ ⚃ ⚄ ⚅ ⚆ ⚇ ⚈ ⚉ ⚊ ⚋ ⚐ ⚑ ⚒ ⚓ ⚔ ⚕ ⚖ ⚗ ⚘ ⚙ ⚚ ⚛ ⚜ ⚠ ⚡ ⚦
# ⚧ ⚨ ⚩ ⚪ ⚫ ⚬ ⚭ ⚮ ⚯ ⚰ ⚱ ⚲ ⚳ ⚴ ⚵ ⚷ ⚸ ⛀ ⛁ ⛂ ⛃ ⛢

# dingbats
# ✁ ✂ ✃ ✄ ✆ ✇ ✈ ✉ ✌ ✍ ✎ ✏ ✐ ✑ ✒ ✓ ✔ ✕ ✖ ✗ ✘
# ✙ ✚ ✛ ✜ ✝ ✞ ✟ ✠ ✡ ✢ ✣ ✤ ✥ ✦ ✧ ✩ ✪ ✫ # ✬ ✭ ✮ ✯✰ ✱ ✲ ✳ ✴ ✵ ✶ ✷ ✸ ✹ ✺ ✻ ✼ ✽ ✾
# ✿ ❀ ❁ ❂ ❃ ❄ ❅ ❆ ❇ ❈ ❉ ❊ ❋ ❍ ❏ ❐ ❑ ❒ ❖
# ❘ ❙ ❚ ❛ ❜ ❝ ❞ ❡ ❢ ❣ ❤ ❥ ❦ ❧ ❨ ❩ ❪ ❫ ❬ ❭ ❮ ❯ ❰ ❱ ❲ ❳ ❴ ❵
# ➀ ➁ ➂ ➃ ➄ ➅ ➆ ➇ ➈ ➉ ➊ ➋ ➌ ➍ ➎ ➏ ➐ ➑ ➒ ➓ ❶ ❷ ❸ ❹ ❺ ❻ ❼ ❽ ❾ ❿
# ➔ ➘ ➙ ➚ ➛ ➜ ➝ ➞ ➟ ➠ ➡ ➢ ➣ ➤ ➥ ➦ ➧ ➨ ➩ ➪ ➫ ➬ ➭ ➮ ➯ ➱ ➲ ➳ ➴ ➵ ➶ ➷ ➸ ➹ ➺ ➻ ➼ ➽ ➾

# The following lines were added by compinstall
# zstyle :compinstall

autoload -Uz compinit
compinit
# End of lines added by compinstall
# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
bindkey -v
# End of lines configured by zsh-newuser-install

# cd if first command is a directory
setopt autocd
# better expansion
setopt extendedglob
# don't store lines begining with space in history
setopt hist_ignore_space
# save space
setopt hist_ignore_dups
# take out unnecessary blanks from history
setopt hist_reduce_blanks
# allow # for comments on command line
setopt interactive_comments
# troublesome feature
setopt no_flow_control
# autocomplete switches for aliases
setopt complete_aliases

# Not interactive?
[ X"${-#*i}" != X"$-" ] || return

setopt hist_ignore_all_dups
autoload -U colors
colors

# you get permission when I tell you
umask 077

alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
alias .......='cd ../../../../../..'
alias cd..='cd ..'
alias cd...='cd ../..'

alias ls='ls --color=auto'
alias dir='dir --color=auto'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF --group-directories-first'

alias ctags='ctags -f .tags'

alias -g L='less -R '
alias -g x='exit'

alias gits='git status'
alias gita='git add'
alias gitc='git checkout'
alias gitd='git diff'
alias gitl='git log'
alias gitb='git branch'
alias gitcb='git checkout -b'
alias gitci='git commit'

alias bx='bundle exec'

# Used for vicmd mode indication
DEFAULT_PROMPT=""
CMDMODE_PROMPT=""

local set_pretty_prompt() {
    add="%{$fg[cyan]%}%n%{$reset_color%}"
    PS1=$add
    CMDMODE_PROMPT=$add

    PS1+=" ⚡ "
    CMDMODE_PROMPT+=" %{$fg[yellow]%}⚡%{$reset_color%} "

    case "$SSH_CLIENT$SSH_CONNECTION" in
        ?*)
            add="%{$fg[magenta]%}%m "
            PS1+=$add
            CMDMODE_PROMPT+=$add
            ;;
        *)
            add="%{$fg[cyan]%}%m "
            PS1+=$add
            CMDMODE_PROMPT+=$add
            ;;
    esac
    add="%{$reset_color%}"
    PS1+=$add
    CMDMODE_PROMPT+=$add

    add="%(?.%{$fg[green]%}➤.%{$fg[red]%}➤)%{$reset_color%} "
    PS1+=$add
    CMDMODE_PROMPT+=$add

    DEFAULT_PROMPT=$PS1
    RPROMPT='%~'
}

man_color() {
    env \
        LESS_TERMCAP_mb="$(printf "\e[1;31m"a)" \
        LESS_TERMCAP_md="$(printf "\e[1;31m")" \
        LESS_TERMCAP_me="$(printf "\e[0m")" \
        LESS_TERMCAP_se="$(printf "\e[0m")" \
        LESS_TERMCAP_so="$(printf "\e[1;44;33m")" \
        LESS_TERMCAP_ue="$(printf "\e[0m")" \
        LESS_TERMCAP_us="$(printf "\e[1;32m")" \
        man "$@"
}

case $TERM in
    xterm*|tmux*|screen*|rxvt-unicode*)
        set_pretty_prompt
        alias man="man_color"
        ;;
    *)
        PROMPT='%n @ %m:%~ $ '
        DEFAULT_PROMPT="${PROMPT}"
        CMDMODE_PROMPT="$PROMPT}"
        ;;
esac

# vicmd mode indication hooks
# http://zshwiki.org/home/zle/vi-mode
precmd() {
    PROMPT="${DEFAULT_PROMPT}"
}

zle-keymap-select() {
    if [[ "${KEYMAP}" = "vicmd" ]]
    then
        PROMPT="${CMDMODE_PROMPT}"
    else
        PROMPT="${DEFAULT_PROMPT}"
    fi
    () { return $__prompt_status }
    zle reset-prompt
}

zle -N zle-keymap-select
# zle -N zle-line-init; defunct, see Home/End section

# better insert mode defaults
bindkey '^R' history-incremental-pattern-search-backward
bindkey '^S' history-incremental-pattern-search-forward
bindkey '^K' kill-line
bindkey '^A' beginning-of-line
bindkey '^E' end-of-line
# inline history complete
bindkey '^P' history-beginning-search-backward
bindkey '^N' history-beginning-search-forward
# to be able to delete coming out of command mode
bindkey '^?' backward-delete-char
bindkey '^H' backward-delete-char
#vim specific
bindkey -a 'gg' beginning-of-buffer-or-history
bindkey -a 'G' end-of-buffer-or-history
# actual undo stack
bindkey -a 'u' undo
bindkey -a '^R' redo

# faster escapes
KEYTIMEOUT=1

export EDITOR=vim
export VISUAL=vim

# completion
if [[ -d "${HOME}/.zsh/completion" ]]
then
    fpath=(~/.zsh/completion/ $fpath)
fi

if [[ -d "${HOME}/.rvm/bin" ]]
then
    PATH="${PATH}":"${HOME}/.rvm/bin"

fi

if [[ -d "${HOME}/.rbenv/bin" ]]
then
    PATH="${HOME}/.rbenv/bin:${PATH}"
fi

alias allmanify='indent -bap -bli0 -i2 -l80 -ncs -npcs -npsl -fca -lc80 -fc1 -nut'
alias v='vim --servername "${DISPLAY-vim}" --remote-silent'

if command -v colordiff &> /dev/null;
then
    alias diff='colordiff -Nuar'
else
    alias diff='diff -Nuar'
fi

local -a rignore_dirs=(tmp vendor/cache vendor/bundle log vendor/assets
spec/vcr)
local -a rignore_file_patns=('*.min.js' 'jquery.*.js' 'plugins/*.scss'
'plugins/*.js' '.tags', '.*.s[a-w][a-z]', '*.un~', 'Session.vim', '*~', '*.zip',
'*.gz', '*.rar', '*.bz2', '*.rar', '*.jpg', '*.png', '*.so', '*.jar', '*.war')

local ror_excludes=""

for ignore_dir in "${rignore_dirs[@]}"
do
    rorg_excludes="${ignore_dir} --exclude-dir=$(printf %q "${ignore_dir}")"
done

for ignore_pat in "${rignore_file_patns[@]}"
do
    rorg_excludes="${ror_excludes} --exclude=$(printf %q "${ignore_pat}")"
done

alias rorg="grep --exclude-dir=vendor/bundle ${ignore_pat}"
alias rorgb="grep ${ignore_pat}"

local rorc_excludes=""
for ignore_patn in ("${rignore_dirs[@]" "${rignore_file_patns[@]}")
do
    rorc_excludes="${ror_excludes} --exclude=$(printf %q "${ignore_patn}")"
done

alias rorctags="ctags --exclude=vendor/bundle ${ror_excludes}"
alias rorctagsb="ctags ${ror_excludes}"
# need to add yard-activerecord plugin to this command
alias rordoc='bundle exec yard gems'

########## cmdline vi fixes ###########
# http://zshwiki.org/home/zle/bindkeys
# home, end, insert, delete keys working
# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -A key
key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Right]="${terminfo[kcuf1]}"
key[Left]="${terminfo[kcub1]}"

# setup key accordingly
if [[ -n "${key[Home]}" ]]
then
    bindkey "${key[Home]}" beginning-of-line
fi
if [[ -n "${key[End]}" ]]
then
    bindkey "${key[End]}" end-of-line
fi
if [[ -n "${key[Insert]}" ]]
then
    bindkey "${key[Insert]}" overwrite-mode
fi
if [[ -n "${key[Delete]}" ]]
then
    bindkey "${key[Delete]}" delete-char
fi
if [[ -n "${key[Up]}" ]]
then
    bindkey "${key[Up]}" up-line-or-history
fi
if [[ -n "${key[Down]}" ]]
then
    bindkey "${key[Down]}" down-line-or-history
fi
if [[ -n "${key[Right]}" ]]
then
    bindkey "${key[Right]}" forward-char
fi
if [[ -n "${key[Left]}" ]]
then
    bindkey "${key[Left]}" backward-char
fi

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
    function zle-line-init () {
    # for the vicmd mode stuff
    typeset -g __prompt_status="$?"
    printf '%s' "${terminfo[smkx]}"
}
function zle-line-finish () {
printf '%s' "${terminfo[rmkx]}"
    }
    zle -N zle-line-init
    zle -N zle-line-finish
fi

# use zsh-syntax-highlighting
SYNTAX_HIGHLIGHT_FILE="/usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
if [[ -f "${SYNTAX_HIGHLIGHT_FILE}" ]]
then
    source "${SYNTAX_HIGHLIGHT_FILE}"
fi
