#!/bin/zsh
# ☺ ☹ ✗ ✓ ❤ ♥ ♦ ► ☣ ☠ « » ♪ ♫ ◆ ◇ ✣ ✧ ✦ ☾ ⚅ ⚑ ⚐ ◊ ⚒ ⚓ ⚔ ⚕ ⚛
# ⚚ ⚠ ⚡ ☢ ✝ ☭ ⌚ ⌛ ¬ × ÷ ∝ ∞ ∢ ∴ ∵ ♭ ♮ ♯ ♩ ❖ ⋆ ✯ ✩ ✪ ° ☐ ☑

# The following lines were added by compinstall
# zstyle :compinstall

autoload -Uz compinit
compinit
# End of lines added by compinstall
# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt autocd extendedglob histignorespace histignoredups
bindkey -v
# End of lines configured by zsh-newuser-install

# Not interactive?
[ X"${-#*i}" != X"$-" ] || return

setopt hist_ignore_all_dups
autoload -U colors
colors

alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
alias .......='cd ../../../../../..'
alias cd..='cd ..'
alias cd...='cd ../..'

alias ls='ls --color=auto'
alias dir='dir --color=auto'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF --group-directories-first'

alias ctags='ctags -f .tags'

alias -g L='less -R '
alias -g x='exit'

# Used for vicmd mode indication
DEFAULT_PROMPT=""
CMDMODE_PROMPT=""

set_pretty_prompt() {
	add="%{$fg[cyan]%}%n%{$reset_color%}"
	PS1=$add
	CMDMODE_PROMPT=$add

	PS1+=" ⚡ "
	CMDMODE_PROMPT+=" %{$fg[yellow]%}⚡%{$reset_color%} "

	case "$SSH_CLIENT$SSH_CONNECTION" in
	?*)
		add="%{$fg[magenta]%}%m "
		PS1+=$add
		CMDMODE_PROMPT+=$add
		;;
	*)
		add="%{$fg[cyan]%}%m "
		PS1+=$add
		CMDMODE_PROMPT+=$add
		;;
	esac
	add="%{$reset_color%}"
	PS1+=$add
	CMDMODE_PROMPT+=$add

	add="%(?.%{$fg[green]%}➤.%{$fg[red]%}➤)%{$reset_color%} "
	PS1+=$add
	CMDMODE_PROMPT+=$add

	DEFAULT_PROMPT=$PS1
	RPROMPT='%~'
}

man_color() {
	env \
		LESS_TERMCAP_mb=$(printf "\e[1;31m") \
		LESS_TERMCAP_md=$(printf "\e[1;31m") \
		LESS_TERMCAP_me=$(printf "\e[0m") \
		LESS_TERMCAP_se=$(printf "\e[0m") \
		LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
		LESS_TERMCAP_ue=$(printf "\e[0m") \
		LESS_TERMCAP_us=$(printf "\e[1;32m") \
			man "$@"
}

case $TERM in
xterm*|tmux*|screen*|rxvt-unicode*)
	set_pretty_prompt
	alias man="man_color"
	;;
*)
	PROMPT='%n @ %m:%~ $ '
	DEFAULT_PROMPT=$PROMPT
	CMDMODE_PROMPT=$PROMPT
	;;
esac

# vicmd mode indication hooks
# http://zshwiki.org/home/zle/vi-mode
precmd() {
	PROMPT=$DEFAULT_PROMPT
}

zle-keymap-select() {
	if [[ $KEYMAP = vicmd ]]
	then
		PROMPT=$CMDMODE_PROMPT
	else
		PROMPT=$DEFAULT_PROMPT
	fi
	() { return $__prompt_status }
	zle reset-prompt
}

zle -N zle-keymap-select
# zle -N zle-line-init; defunct, see Home/End section

# better insert mode defaults
bindkey '^R' history-incremental-pattern-search-backward
bindkey '^S' history-incremental-pattern-search-forward
bindkey '^K' kill-line
bindkey '^A' beginning-of-line
bindkey '^E' end-of-line
# inline history complete
bindkey '^P' history-beginning-search-backward
bindkey '^N' history-beginning-search-forward
# to be able to delete coming out of command mode
bindkey '^?' backward-delete-char
bindkey '^H' backward-delete-char
#vim specific
bindkey -a 'gg' beginning-of-buffer-or-history
bindkey -a 'G' end-of-buffer-or-history
# actual undo stack
bindkey -a 'u' undo
bindkey -a '^R' redo

# faster escapes
KEYTIMEOUT=1

export EDITOR=vim
export VISUAL=vim

PATH=$PATH:$HOME/.rvm/bin

alias allmanify='indent -bap -bli0 -i2 -l80 -ncs -npcs -npsl -fca -lc80 -fc1 -nut'
alias v='vim --remote-silent'

if command -v colordiff &> /dev/null;
then
	alias diff='colordiff -Nuar'
else
	alias diff='diff -Nuar'
fi

########## cmdline vi fixes ###########
# http://zshwiki.org/home/zle/bindkeys
# home, end, insert, delete keys working
# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -A key
key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Right]="${terminfo[kcuf1]}"
key[Left]="${terminfo[kcub1]}"

# setup key accordingly
[[ -n "${key[Home]}" ]] && bindkey "${key[Home]}" beginning-of-line
[[ -n "${key[End]}" ]] && bindkey "${key[End]}" end-of-line
[[ -n "${key[Insert]}" ]] && bindkey "${key[Insert]}" overwrite-mode
[[ -n "${key[Delete]}" ]] && bindkey "${key[Delete]}" delete-char
[[ -n "${key[Up]}" ]] && bindkey "${key[Up]}" up-line-or-history
[[ -n "${key[Down]}" ]] && bindkey "${key[Down]}" down-line-or-history
[[ -n "${key[Right]}" ]] && bindkey "${key[Right]}" forward-char
[[ -n "${key[Left]}" ]] && bindkey "${key[Left]}" backward-char

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
    function zle-line-init () {
        # for the vicmd mode stuff
        typeset -g __prompt_status="$?"
        printf '%s' "${terminfo[smkx]}"
    }
    function zle-line-finish () {
        printf '%s' "${terminfo[rmkx]}"
    }
    zle -N zle-line-init
    zle -N zle-line-finish
fi
